@use './core';
@use '../focus-indicator';
@use '../state-layer';

/* stylelint-disable scss/operator-no-unspaced */
$svg-styles: '<style>line, path { fill: none; stroke-width: 4px; stroke: rgb(255, 255, 255); }</style>';
$checkmark-svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">#{$svg-styles}<path d="M1.73,12.91 8.1,19.28 22.79,4.59"></path></svg>');
$mixedmark-svg: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">#{$svg-styles}<line x1="2" y1="12" x2="22" y2="12"></line></svg>');
/* stylelint-enable scss/operator-no-unspaced */

.forge-checkbox {
  @include core.tokens;
}

.forge-checkbox {
  @include focus-indicator.standalone($focus-target: 'input[type=checkbox]');
  @include focus-indicator.provide-theme(
    (
      shape: 0px,
      outward-offset: 8px
    )
  );

  display: inline grid;
  position: relative;
  align-items: center;
  justify-items: center;

  inline-size: #{core.token(state-layer-width)};
  block-size: #{core.token(state-layer-height)};

  input[type='checkbox'] {
    appearance: none;

    grid-column: 1;
    grid-row: 1;
    z-index: 20;

    outline: none;
    margin: 0;

    cursor: pointer;

    &:checked,
    &:indeterminate {
      @include state-layer.provide-theme(
        (
          color: #{core.token(state-layer-checked-color)}
        )
      );
    }

    &:not(:disabled) {
      @include state-layer.standalone('');

      border-radius: #{core.token(state-layer-shape)} !important;
    }
  }

  &::before {
    @include core.background;

    display: block;
    grid-column: 1;
    grid-row: 1;

    line-height: 0;

    content: '';
  }

  &:has(input[type='checkbox']:checked) {
    &::before {
      @include core.background-checked;

      content: #{$checkmark-svg};
    }
  }

  &:has(input[type='checkbox']:indeterminate) {
    &::before {
      @include core.background-checked;

      content: #{$mixedmark-svg};
    }
  }

  &:has(input[type='checkbox']:disabled) {
    @include core.checkbox-disabled;
    @include core.container-disabled;
  }

  &:has(input[type='checkbox']:focus-visible) {
    @include focus-indicator.keyframes;

    &::after {
      position: relative;
      grid-column: 1;
      grid-row: 1;
      inset: 0;

      /* 
        We "fake" the pseudo-element's dimensions here to size the focus indicator without
        overriding any of its calculations, taking the width of its outline into account
      */
      padding-inline: calc(#{core.token(width)} - #{focus-indicator.token(width)});
      padding-block: calc(#{core.token(height)} - #{focus-indicator.token(width)});
    }
  }

  &--dense {
    @include core.container-dense;
  }
}
